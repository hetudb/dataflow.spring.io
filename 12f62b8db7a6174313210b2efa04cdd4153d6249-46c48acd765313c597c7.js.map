{"version":3,"sources":["webpack:///./node_modules/path-browserify/index.js","webpack:///./node_modules/classnames/index.js","webpack:///./src/components/documentation/SummaryNav.js","webpack:///./src/components/documentation/SummaryTile.js","webpack:///./src/components/documentation/VersionSelect.js","webpack:///./src/components/documentation/Utils.js"],"names":["normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","filter","xs","f","res","push","exports","resolve","resolvedPath","resolvedAbsolute","arguments","path","process","cwd","TypeError","charAt","split","p","join","normalize","isAbsolute","trailingSlash","substr","paths","Array","prototype","slice","call","index","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","code","charCodeAt","hasRoot","matchedSlash","basename","ext","extname","startDot","startPart","preDotState","str","len","hasOwn","hasOwnProperty","classNames","classes","arg","argType","isArray","inner","apply","key","module","default","SummaryNav","tree","depth","className","map","item","id","title","description","children","defaultProps","SummaryTile","VersionSelect","state","menu","componentDidMount","document","addEventListener","handleClickOutside","componentWillUnmount","removeEventListener","event","wrapperRef","contains","target","setState","setWrapperRef","node","getUrl","url","render","currentVersion","this","props","versions","find","version","ref","onClick","e","preventDefault","navigate","React","Component","require","getNodeFormatted","get","urlParent","parent","edges","itemParent","meta","keywords","getBreadcrumb","page","result","optionVersions","getVersions","getNode","edge","value","replace","versionItem","v","getCurrentVersion","reverse","proptypes","PropTypes","shape","arrayOf","string","isRequired","fields","frontmatter","getSummaryType","depths","startsWith","max","getPrevNext","prev","next","getTree","pathStart","roots","arrSelection","nodes","parentId","category","getMeta","breadcrumb","Object","keys","name","a","object","versionId"],"mappings":"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","file":"12f62b8db7a6174313210b2efa04cdd4153d6249-46c48acd765313c597c7.js","sourcesContent":["// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n} // path.resolve([from ...], to)\n// posix version\n\n\nexports.resolve = function () {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? arguments[i] : process.cwd(); // Skip empty and invalid entries\n\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  } // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n  // Normalize the path\n\n\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}; // path.normalize(path)\n// posix version\n\n\nexports.normalize = function (path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/'; // Normalize the path\n\n  path = normalizeArray(filter(path.split('/'), function (p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n}; // posix version\n\n\nexports.isAbsolute = function (path) {\n  return path.charAt(0) === '/';\n}; // posix version\n\n\nexports.join = function () {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function (p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n\n    return p;\n  }).join('/'));\n}; // path.relative(from, to)\n// posix version\n\n\nexports.relative = function (from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47\n  /*/*/\n  ;\n  var end = -1;\n  var matchedSlash = true;\n\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n\n    if (code === 47\n    /*/*/\n    ) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47\n    /*/*/\n    ) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        start = i + 1;\n        break;\n      }\n    } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n} // Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\n\n\nexports.basename = function (path, ext) {\n  var f = basename(path);\n\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n\n  var preDotState = 0;\n\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n\n    if (code === 47\n    /*/*/\n    ) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        startPart = i + 1;\n        break;\n      }\n\n      continue;\n    }\n\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n\n    if (code === 46\n    /*.*/\n    ) {\n      // If this is our first dot, mark it as the start of our extension\n      if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n\n  return path.slice(startDot, end);\n};\n\nfunction filter(xs, f) {\n  if (xs.filter) return xs.filter(f);\n  var res = [];\n\n  for (var i = 0; i < xs.length; i++) {\n    if (f(xs[i], i, xs)) res.push(xs[i]);\n  }\n\n  return res;\n} // String.prototype.substr - negative index don't work in IE8\n\n\nvar substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {\n  return str.substr(start, len);\n} : function (str, start, len) {\n  if (start < 0) start = str.length + start;\n  return str.substr(start, len);\n};","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg) && arg.length) {\n        var inner = classNames.apply(null, arg);\n\n        if (inner) {\n          classes.push(inner);\n        }\n      } else if (argType === 'object') {\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { Link } from 'gatsby'\n\nconst SummaryNav = ({ tree, depth }) => {\n  return (\n    <ul className={`level${depth}`}>\n      {tree.map(item => (\n        <li key={item.id}>\n          <Link key={`${item.id}`} to={item.path} className={`level${depth}`}>\n            <div className='title' key={`linktitle${item.id}`}>\n              {item.title}\n            </div>\n            <div className='description'>{item.description}</div>\n          </Link>\n          {item.children.length > 0 && (\n            <SummaryNav tree={item.children} depth={depth + 1} />\n          )}\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nSummaryNav.defaultProps = {\n  depth: 0,\n}\n\nSummaryNav.propTypes = {\n  tree: PropTypes.arrayOf(PropTypes.object).isRequired,\n  depth: PropTypes.number,\n}\n\nexport default SummaryNav\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { Link } from 'gatsby'\n\nconst SummaryTile = ({ tree, depth }) => {\n  return (\n    <ul className={`level${depth}`}>\n      {tree.map(item => (\n        <li key={item.id} className={`level${depth}`}>\n          <Link key={`${item.id}`} to={item.path} className={`level${depth}`}>\n            <div className='title' key={`linktitle${item.id}`}>\n              {item.title}\n            </div>\n            {depth > 0 && <div className='description'>{item.description}</div>}\n          </Link>\n          {item.children.length > 0 ? (\n            <SummaryTile tree={item.children} depth={depth + 1} />\n          ) : (\n            <>\n              {depth === 0 && (\n                <ul className={`level${depth + 1}`}>\n                  <li className={`level${depth + 1}`}>\n                    <Link\n                      key={`${item.id}`}\n                      to={item.path}\n                      className={`level${depth + 1}`}\n                    >\n                      <div className='title' key={`linktitle${item.id}`}>\n                        {item.title}\n                      </div>\n                      <div className='description'>{item.description}</div>\n                    </Link>\n                  </li>\n                </ul>\n              )}\n            </>\n          )}\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nSummaryTile.defaultProps = {\n  depth: 0,\n}\n\nSummaryTile.propTypes = {\n  tree: PropTypes.arrayOf(PropTypes.object).isRequired,\n  depth: PropTypes.number,\n}\n\nexport default SummaryTile\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport classNames from 'classnames'\nimport { navigate } from 'gatsby'\n\nimport { IconChevronDown } from './../common/icons'\n\nclass VersionSelect extends React.Component {\n  state = {\n    menu: false,\n  }\n\n  componentDidMount = () => {\n    document.addEventListener('mousedown', this.handleClickOutside)\n  }\n\n  componentWillUnmount = () => {\n    document.removeEventListener('mousedown', this.handleClickOutside)\n  }\n\n  handleClickOutside = event => {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.setState({ menu: false })\n    }\n  }\n\n  setWrapperRef = node => {\n    this.wrapperRef = node\n  }\n\n  getUrl = url => {\n    if (url[url.length - 1] !== '/') {\n      return `${url}/`\n    }\n    return url\n  }\n\n  render() {\n    const currentVersion = this.props.versions.find(\n      version => version.key === this.props.version\n    )\n    return (\n      <>\n        <div\n          className={classNames('dropdown', this.state.menu ? 'active' : '')}\n          ref={this.setWrapperRef}\n        >\n          <div\n            className='dropdown-toggle'\n            onClick={e => {\n              this.setState({ menu: true })\n              e.preventDefault()\n            }}\n          >\n            Version: <strong>{currentVersion.title}</strong>\n            <IconChevronDown />\n          </div>\n          <div className='dropdown-menu'>\n            {this.props.versions.map(version => (\n              <div\n                className={classNames(\n                  'item',\n                  this.props.version === version.key ? 'selected' : ''\n                )}\n                onClick={() => {\n                  if (this.props.version !== version.key) {\n                    navigate(this.getUrl(version.path))\n                  }\n                }}\n                key={`a${version.key}`}\n              >\n                {version.title}\n              </div>\n            ))}\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nVersionSelect.propTypes = {\n  version: PropTypes.string.isRequired,\n  versions: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n}\n\nexport default VersionSelect\n","import PropTypes from 'prop-types'\nimport get from 'lodash.get'\nimport path from 'path'\nconst versions = require('../../../content/versions.json')\n\nconst isDev = process.env.NODE_ENV === 'development'\n\n/**\n * Create a formatted node object\n */\nconst getNodeFormatted = (arr, item) => {\n  if (!item) return\n  const url = get(item, 'fields.path')\n  const urlParent = path.join(path.dirname(url), '/')\n  const parent = arr.edges.find(\n    itemParent => get(itemParent, 'node.fields.path') === urlParent\n  )\n  return {\n    title: get(item, 'frontmatter.title'),\n    path: url,\n    description: get(item, 'frontmatter.description'),\n    parent: get(parent, 'frontmatter.title', 'Documentation'),\n    meta: {\n      title: get(item, 'frontmatter.meta_title') || '',\n      description: get(item, 'frontmatter.meta_description') || '',\n      keywords: get(item, 'frontmatter.keywords') || [],\n    },\n  }\n}\n\n/**\n * Create an array of pages representing a breadcrumb.\n * The first page is the documentation root.\n */\nexport const getBreadcrumb = function getBreadcrumb(arr, page) {\n  const result = []\n  let url = get(page, 'fields.path')\n  const optionVersions = getVersions(versions)\n\n  const getNode = (edge, value) => {\n    return edge.edges.find(({ node }) => get(node, 'fields.path') === value)\n  }\n  while (url !== `/docs/`) {\n    const node = get(getNode(arr, url), 'node')\n    if (!node) {\n      const version = url.substr(`/docs/`.length).replace('/', '')\n\n      const versionItem = optionVersions.find(v => v.key === version)\n\n      result.push({\n        title: versionItem.title,\n        path: url,\n        description: '',\n        meta: {\n          title: `Documentation ${version}`,\n          description: 'Spring Cloud Data Flow - Documentation',\n          keywords: [],\n        },\n      })\n    } else {\n      result.push(getNodeFormatted(arr, get(getNode(arr, url), 'node')))\n    }\n    url = path.join(path.dirname(url), '/')\n  }\n\n  const currentVersion = getCurrentVersion(versions)\n\n  if (get(page, 'fields.version') === currentVersion) {\n    result.push({\n      title: `Current`,\n      path: `/docs/`,\n      description: '',\n      meta: {\n        title: 'Documentation',\n        description: 'Spring Cloud Data Flow - Documentation',\n        keywords: [],\n      },\n    })\n  }\n\n  // result.push({\n  //   title: get(page, 'fields.version'),\n  //   path: `/docs/${get(page, 'fields.version')}`,\n  //   description: '',\n  //   meta: {\n  //     title: 'Spring Cloud Data Flow Documentation',\n  //     description: 'Spring Cloud Data Flow Documentation',\n  //     keywords: [],\n  //   },\n  // })\n\n  result.push({\n    title: 'Documentation',\n    path: '/docs/',\n    description: '',\n    meta: {\n      title: 'Documentation',\n      description: 'Spring Cloud Data Flow Documentation',\n      keywords: [],\n    },\n  })\n\n  return result.reverse()\n}\n\ngetBreadcrumb.proptypes = {\n  arr: PropTypes.shape({\n    edges: PropTypes.arrayOf(\n      PropTypes.shape({\n        node: PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          fields: PropTypes.shape({\n            path: PropTypes.string.isRequired,\n          }).isRequired,\n          frontmatter: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            path: PropTypes.string.isRequired,\n            description: PropTypes.string,\n          }).isRequired,\n        }).isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n  page: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      path: PropTypes.string.isRequired,\n      description: PropTypes.string,\n    }).isRequired,\n    fields: PropTypes.shape({\n      version: PropTypes.string.isRequired,\n    }).isRequired,\n  }),\n}\n\n/**\n * Determine the summary type:\n * - tiles: more than one level,\n * - links: only one level of links.\n */\nexport const getSummaryType = function getSummaryType(arr, page) {\n  const url = get(page, 'fields.path')\n  const depth = url.split('/').length\n  const depths = arr.edges\n    .filter(item => {\n      const value = get(item, 'node.fields.path')\n      return !(!value.startsWith(url) || url === value)\n    })\n    .map(item => {\n      return get(item, 'node.fields.path').split('/').length\n    })\n  if (Math.max(...depths) > depth + 1) {\n    return 'tiles'\n  }\n  return 'links'\n}\n\ngetSummaryType.proptypes = {\n  arr: PropTypes.shape({\n    edges: PropTypes.arrayOf(\n      PropTypes.shape({\n        node: PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          fields: PropTypes.shape({\n            path: PropTypes.string.isRequired,\n          }).isRequired,\n          frontmatter: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            path: PropTypes.string.isRequired,\n            description: PropTypes.string,\n          }).isRequired,\n        }).isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n  page: PropTypes.shape({\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      path: PropTypes.string.isRequired,\n      description: PropTypes.string,\n    }).isRequired,\n  }),\n}\n\n/**\n * Takes an array of markdown pages and create a tree. The tree is based\n * on the path field (fields.path)\n */\nexport const getPrevNext = function getPrevNext(arr, page) {\n  let prev, next\n\n  for (let i = 0; i < arr.edges.length; i++) {\n    const node = get(arr, `edges[${i}].node`)\n    if (get(node, 'fields.path') === get(page, 'fields.path')) {\n      prev = get(arr, `edges[${i - 1}].node`)\n      next = get(arr, `edges[${i + 1}].node`)\n      i = arr.edges.length\n    }\n  }\n  return {\n    prev: getNodeFormatted(arr, prev),\n    next: getNodeFormatted(arr, next),\n  }\n}\n\ngetPrevNext.proptypes = {\n  arr: PropTypes.shape({\n    edges: PropTypes.arrayOf(\n      PropTypes.shape({\n        node: PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          fields: PropTypes.shape({\n            path: PropTypes.string.isRequired,\n          }).isRequired,\n          frontmatter: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n          }).isRequired,\n        }).isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n  page: PropTypes.shape({\n    fields: PropTypes.shape({\n      path: PropTypes.string.isRequired,\n    }).isRequired,\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  }),\n}\n\n/**\n * Takes an array of markdown pages and create a tree\n * The tree is based on the path field (fields.path)\n */\nexport const getTree = function getTree(arr, pathStart) {\n  let map = {},\n    roots = []\n\n  const arrSelection = arr.edges.filter(item => {\n    const value = get(item, 'node.fields.path')\n    if (pathStart) {\n      if (!value.startsWith(pathStart) || pathStart === value) {\n        return false\n      }\n    }\n    return true\n  })\n\n  const nodes = arrSelection.map((item, index) => {\n    let url = get(item, 'node.fields.path')\n    const urlParent = path.join(path.dirname(url), '/')\n\n    const parent = arrSelection.find(\n      itemParent => get(itemParent, 'node.fields.path') === urlParent\n    )\n    map[get(item, 'node.id')] = index\n    return {\n      id: get(item, 'node.id'),\n      title: get(item, 'node.frontmatter.title'),\n      description: get(item, 'node.frontmatter.description'),\n      path: get(item, 'node.fields.path'),\n      parentId: get(parent, 'node.id', '0'),\n      category: get(item, 'node.fields.category'),\n      children: [],\n    }\n  })\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i]\n    if (node.parentId !== '0') {\n      nodes[map[node.parentId]].children.push(node)\n    } else {\n      roots.push(node)\n    }\n  }\n  return roots\n}\n\ngetTree.proptypes = {\n  arr: PropTypes.shape({\n    edges: PropTypes.arrayOf(\n      PropTypes.shape({\n        node: PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          fields: PropTypes.shape({\n            path: PropTypes.string.isRequired,\n          }).isRequired,\n          frontmatter: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n          }).isRequired,\n        }).isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n  pathStart: PropTypes.string,\n}\n\n/**\n * Return the fields for the meta (<head />)\n * The page meta fields inherit from the parent meta fields.\n */\nexport const getMeta = function getMeta(arr, page) {\n  const breadcrumb = getBreadcrumb(arr, page).reverse()\n  return {\n    title:\n      get(\n        breadcrumb.find(item => get(item, 'meta.title')),\n        'meta.title'\n      ) || '',\n    description:\n      get(\n        breadcrumb.find(item => get(item, 'meta.description')),\n        'meta.description'\n      ) || '',\n    keywords:\n      get(\n        breadcrumb.find(item => get(item, 'meta.keywords')),\n        'meta.keywords'\n      ) || [],\n  }\n}\n\ngetMeta.proptypes = {\n  arr: PropTypes.shape({\n    edges: PropTypes.arrayOf(\n      PropTypes.shape({\n        node: PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          fields: PropTypes.shape({\n            path: PropTypes.string.isRequired,\n          }).isRequired,\n          frontmatter: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n          }).isRequired,\n        }).isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n  page: PropTypes.shape({\n    fields: PropTypes.shape({\n      path: PropTypes.string.isRequired,\n    }).isRequired,\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  }),\n}\n\n/**\n * Enrich version object\n * Object to array\n */\nexport const getVersions = function getVersions(arr) {\n  return Object.keys(arr)\n    .map(key => {\n      const value = arr[key]\n      if (!(!isDev && key === 'next')) {\n        let title = value.name\n        title = title === 'next' ? `${value.name} (dev)` : title\n        title = !!value['current'] ? `${value.name} (Current)` : title\n        const path = !!value['current'] ? `/docs/` : `/docs/${key}`\n        return {\n          key: key,\n          title: title,\n          path: path,\n        }\n      }\n      return null\n    })\n    .filter(a => !!a)\n}\n\ngetVersions.proptypes = {\n  arr: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\n/**\n * Get Current version ID\n * Return a string\n */\nexport const getCurrentVersion = function getCurrentVersion(arr) {\n  return Object.keys(arr).find(versionId => {\n    const version = arr[versionId]\n    return !!version['current']\n  })\n}\n\ngetCurrentVersion.proptypes = {\n  arr: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n"],"sourceRoot":""}