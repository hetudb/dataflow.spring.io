{"version":3,"sources":["webpack:///./src/pages/docs.js"],"names":["DocsPage","render","edges","this","props","data","pages","filter","edge","get","optionVersions","getVersions","versions","currentVersion","getCurrentVersion","id","title","description","path","className","version","length","map","block","index","key","page","index2","to","React","Component"],"mappings":"yNAaMA,E,kGACJC,OAAA,WACE,IAAMC,EAAQC,KAAKC,MAAMC,KAAKC,MAC9BJ,EAAMA,MAAQA,EAAMA,MAAMK,QAAO,SAAAC,GAC/B,MAA+C,aAAxCC,IAAID,EAAM,6BAEnB,IAAME,EAAiBC,YAAYC,GAC7BC,EAAiBC,YAAkBF,GAEnCN,EAAQ,CACZ,CACE,CACES,GAAI,eACJC,MAAOP,IAAIP,EAAO,mCAClBe,YAAaR,IAAIP,EAAO,yCACxBgB,KAAMT,IAAIP,EAAO,8BAEnB,CACEa,GAAI,WACJC,MAAOP,IAAIP,EAAO,mCAClBe,YAAaR,IAAIP,EAAO,yCACxBgB,KAAMT,IAAIP,EAAO,8BAEnB,CACEa,GAAI,mBACJC,MAAOP,IAAIP,EAAO,mCAClBe,YAAaR,IAAIP,EAAO,yCACxBgB,KAAMT,IAAIP,EAAO,8BAEnB,CACEa,GAAI,OACJC,MAAOP,IAAIP,EAAO,mCAClBe,YAAaR,IAAIP,EAAO,yCACxBgB,KAAMT,IAAIP,EAAO,+BAGrB,CACE,CACEa,GAAI,eACJC,MAAOP,IAAIP,EAAO,mCAClBe,YAAaR,IAAIP,EAAO,yCACxBgB,KAAMT,IAAIP,EAAO,8BAEnB,CACEa,GAAI,kBACJC,MAAOP,IAAIP,EAAO,mCAClBe,YAAaR,IAAIP,EAAO,yCACxBgB,KAAMT,IAAIP,EAAO,8BAEnB,CACEa,GAAI,6BACJC,MAAOP,IAAIP,EAAO,mCAClBe,YAAaR,IAAIP,EAAO,yCACxBgB,KAAMT,IAAIP,EAAO,+BAGrB,CACE,CACEa,GAAI,UACJC,MAAOP,IAAIP,EAAO,mCAClBe,YAAaR,IAAIP,EAAO,yCACxBgB,KAAMT,IAAIP,EAAO,8BAEnB,CACEa,GAAI,WACJC,MAAOP,IAAIP,EAAO,mCAClBe,YAAaR,IAAIP,EAAO,yCACxBgB,KAAMT,IAAIP,EAAO,gCAIvB,OACE,kBAAC,IAAD,CAAQiB,UAAU,WAAWC,QAASP,GACpC,kBAAC,IAAD,CAAKG,MAAM,kBACX,yBAAKG,UAAU,aACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,cACb,6CACA,6GAKCT,EAAeW,OAAS,GACvB,kBAAC,IAAD,CACET,SAAUF,EACVU,QAASP,MAKjB,yBAAKM,UAAU,SACZb,EAAMgB,KAAI,SAACC,EAAOC,GAAR,OACT,yBAAKL,UAAU,MAAMM,IAAG,KAAOD,GAC5BD,EAAMD,KAAI,SAACI,EAAMC,GAChB,OAAOlB,IAAIiB,EAAM,MACf,kBAAC,OAAD,CACED,IAAG,KAAOC,EAAKX,GACfa,GAAIF,EAAKR,KACTC,UAAU,QAEV,6BAASM,IAAG,KAAOE,GACjB,wBAAIF,IAAG,KAAOE,EAAUR,UAAU,SAC/BO,EAAKV,OAER,yBAAKS,IAAG,KAAOE,EAAUR,UAAU,eAChCO,EAAKT,aAER,0BAAMQ,IAAG,KAAOC,EAAKX,GAAMI,UAAU,WAArC,eAMJ,yBAAKA,UAAU,kBAAkBM,IAAG,KAAOE,gB,GAnH1CE,IAAMC,WAiKd9B","file":"component---src-pages-docs-js-cc66d2334c9bf5392dcb.js","sourcesContent":["import React from 'react'\nimport get from 'lodash.get'\nimport { Link, graphql } from 'gatsby'\n\nimport versions from './../../content/versions.json'\nimport { Layout } from '../components/common/layout'\nimport { Seo } from '../components/common/seo'\nimport {\n  VersionSelect,\n  getCurrentVersion,\n  getVersions,\n} from '../components/documentation'\n\nclass DocsPage extends React.Component {\n  render() {\n    const edges = this.props.data.pages\n    edges.edges = edges.edges.filter(edge => {\n      return get(edge, 'node.frontmatter.title') !== 'Markdown'\n    })\n    const optionVersions = getVersions(versions)\n    const currentVersion = getCurrentVersion(versions)\n\n    const pages = [\n      [\n        {\n          id: 'installation',\n          title: get(edges, 'edges[0].node.frontmatter.title'),\n          description: get(edges, 'edges[0].node.frontmatter.description'),\n          path: get(edges, 'edges[0].node.fields.path'),\n        },\n        {\n          id: 'concepts',\n          title: get(edges, 'edges[1].node.frontmatter.title'),\n          description: get(edges, 'edges[1].node.frontmatter.description'),\n          path: get(edges, 'edges[1].node.fields.path'),\n        },\n        {\n          id: 'developer-guides',\n          title: get(edges, 'edges[2].node.frontmatter.title'),\n          description: get(edges, 'edges[2].node.frontmatter.description'),\n          path: get(edges, 'edges[2].node.fields.path'),\n        },\n        {\n          id: 'rfcs',\n          title: get(edges, 'edges[8].node.frontmatter.title'),\n          description: get(edges, 'edges[8].node.frontmatter.description'),\n          path: get(edges, 'edges[8].node.fields.path'),\n        },\n      ],\n      [\n        {\n          id: 'batch-guides',\n          title: get(edges, 'edges[3].node.frontmatter.title'),\n          description: get(edges, 'edges[3].node.frontmatter.description'),\n          path: get(edges, 'edges[3].node.fields.path'),\n        },\n        {\n          id: 'featured-guides',\n          title: get(edges, 'edges[4].node.frontmatter.title'),\n          description: get(edges, 'edges[4].node.frontmatter.description'),\n          path: get(edges, 'edges[4].node.fields.path'),\n        },\n        {\n          id: 'commercial-featured-guides',\n          title: get(edges, 'edges[5].node.frontmatter.title'),\n          description: get(edges, 'edges[5].node.frontmatter.description'),\n          path: get(edges, 'edges[5].node.fields.path'),\n        },\n      ],\n      [\n        {\n          id: 'recipes',\n          title: get(edges, 'edges[6].node.frontmatter.title'),\n          description: get(edges, 'edges[6].node.frontmatter.description'),\n          path: get(edges, 'edges[6].node.fields.path'),\n        },\n        {\n          id: 'polyglot',\n          title: get(edges, 'edges[7].node.frontmatter.title'),\n          description: get(edges, 'edges[7].node.frontmatter.description'),\n          path: get(edges, 'edges[7].node.fields.path'),\n        },\n      ],\n    ]\n    return (\n      <Layout className='page-doc' version={currentVersion}>\n        <Seo title='Documentation' />\n        <div className='container'>\n          <div className='layout-col'>\n            <div className='left'>\n              <div className='page-title'>\n                <h1>Documentation</h1>\n                <p>\n                  Comprehensive documentation, guides, and resources for Spring\n                  Cloud Data Flow.\n                </p>\n\n                {optionVersions.length > 1 && (\n                  <VersionSelect\n                    versions={optionVersions}\n                    version={currentVersion}\n                  />\n                )}\n              </div>\n            </div>\n            <div className='links'>\n              {pages.map((block, index) => (\n                <div className='col' key={`i1${index}`}>\n                  {block.map((page, index2) => {\n                    return get(page, 'id') ? (\n                      <Link\n                        key={`i6${page.id}`}\n                        to={page.path}\n                        className='item'\n                      >\n                        <article key={`i3${index2}`}>\n                          <h2 key={`i4${index2}`} className='title'>\n                            {page.title}\n                          </h2>\n                          <div key={`i5${index2}`} className='description'>\n                            {page.description}\n                          </div>\n                          <span key={`i7${page.id}`} className='read-me'>\n                            Read more\n                          </span>\n                        </article>\n                      </Link>\n                    ) : (\n                      <div className='item item-empty' key={`i8${index2}`} />\n                    )\n                  })}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport const articleQuery = graphql`\n  query {\n    pages: allMarkdownRemark(\n      filter: {\n        fields: {\n          hash: { eq: \"documentation\" }\n          root: { eq: true }\n          currentVersion: { eq: true }\n          exclude: { ne: true }\n        }\n      }\n      sort: { fields: fields___slug, order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            path\n            version\n          }\n          frontmatter {\n            title\n            description\n            meta_title\n            meta_description\n            keywords\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default DocsPage\n"],"sourceRoot":""}