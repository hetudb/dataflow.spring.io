{"version":3,"sources":["webpack:///./src/pages/news.js","webpack:///./src/components/news/List.js","webpack:///./src/components/news/Latest.js","webpack:///./src/components/news/Utils.js"],"names":["NewsPage","data","edges","pages","className","title","items","Item","item","key","get","fluid","alt","parseDate","List","map","target","rel","href","to","defaultProps","Latest","query","render","allMarkdownRemark","date","parts","split","d","Date","getDay","getMonth","getDate","getFullYear"],"mappings":"4FAAA,oEAwDeA,UAjDE,SAAAC,GACf,IAAMC,EAAQD,EAAKA,KAAKE,MAAMD,MAC9B,OACE,kBAAC,IAAD,CAAQE,UAAU,aAChB,kBAAC,IAAD,CAAKC,MAAM,kBACX,yBAAKD,UAAU,aACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,yBACb,8CAEF,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAME,MAAOJ,U,uNCVnBK,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,6BAASC,IAAG,WAAaC,IAAIF,EAAM,YACjC,kBAAC,IAAD,CACEG,MAAOD,IAAIF,EAAM,gDACjBI,IAAI,KAEN,yBAAKR,UAAU,gBACb,wBAAIK,IAAG,MAAQC,IAAIF,EAAM,YACtBE,IAAIF,EAAM,2BAEb,uBAAGJ,UAAU,QAAQS,EAAUH,IAAIF,EAAM,2BACzC,uBAAGJ,UAAU,OAAOK,IAAG,QAAUC,IAAIF,EAAM,YACxCE,IAAIF,EAAM,iCAEb,uBAAGJ,UAAU,OAAOK,IAAG,QAAUC,IAAIF,EAAM,YAA3C,gBAQFM,EAAO,SAAC,GACZ,OAD0B,EAAZR,MACDS,KAAI,SAAAP,GAAI,OACnBE,IAAIF,EAAM,6BACR,uBACEJ,UAAU,OACVK,IAAG,QAAUC,IAAIF,EAAM,WACvBQ,OAAO,SACPC,IAAI,sBACJC,KAAMR,IAAIF,EAAM,0BAEhB,6BACE,kBAAC,EAAD,CAAMA,KAAMA,MAIhB,kBAAC,OAAD,CACEJ,UAAU,OACVK,IAAG,QAAUC,IAAIF,EAAM,WACvBW,GAAE,QAAUT,IAAIF,EAAM,0BAEtB,6BACE,kBAAC,EAAD,CAAMA,KAAMA,UAOtBM,EAAKM,aAAe,CAClBd,MAAO,IAOMQ,QCtBAO,EAxCA,WACb,OACE,kBAAC,cAAD,CACEC,MAAK,aA8BLC,OAAQ,SAAAtB,GACN,OAAO,kBAAC,EAAD,CAAMK,MAAOL,EAAKuB,kBAAkBtB,YCRpCW,EA/BG,SAAAY,GAChB,IAAMC,EAAQD,EAAKE,MAAM,KACnBC,EAAI,IAAIC,KAAKH,EAAM,GAAIA,EAAM,GAAK,EAAGA,EAAM,IAwBjD,MAvBgB,CACd,SACA,SACA,UACA,YACA,WACA,SACA,YAgBgBE,EAAEE,UAApB,KAdc,CACZ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGMF,EAAEG,YADV,IAEIH,EAAEI,UAFN,KAEoBJ,EAAEK","file":"component---src-pages-news-js-2eb6d7d93a6d7c9cef1d.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport { Layout } from '../components/common/layout'\nimport { List } from '../components/news'\nimport { Seo } from '../components/common/seo'\n\nconst NewsPage = data => {\n  const edges = data.data.pages.edges\n  return (\n    <Layout className='page-news'>\n      <Seo title='Announcements' />\n      <div className='container'>\n        <div className='layout-basic'>\n          <div className='title-news page-title'>\n            <h1>Announcements</h1>\n          </div>\n          <div className='news-list'>\n            <List items={edges} />\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const articleQuery = graphql`\n  query {\n    pages: allMarkdownRemark(\n      filter: { fields: { hash: { eq: \"news\" } } }\n      sort: { fields: fileAbsolutePath, order: DESC }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            description\n            path\n            category\n            date\n            external\n            image {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default NewsPage\n","import Img from 'gatsby-image'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport get from 'lodash.get'\nimport { Link } from 'gatsby'\n\nimport { parseDate } from './index'\n\nconst Item = ({ item }) => {\n  return (\n    <article key={`article-${get(item, 'node.id')}`}>\n      <Img\n        fluid={get(item, 'node.frontmatter.image.childImageSharp.fluid')}\n        alt=''\n      />\n      <div className='item-content'>\n        <h1 key={`h1-${get(item, 'node.id')}`}>\n          {get(item, 'node.frontmatter.title')}\n        </h1>\n        <p className='date'>{parseDate(get(item, 'node.frontmatter.date'))}</p>\n        <p className='desc' key={`desc-${get(item, 'node.id')}`}>\n          {get(item, 'node.frontmatter.description')}\n        </p>\n        <p className='link' key={`link-${get(item, 'node.id')}`}>\n          Read more\n        </p>\n      </div>\n    </article>\n  )\n}\n\nconst List = ({ items }) => {\n  return items.map(item =>\n    get(item, 'node.frontmatter.external') ? (\n      <a\n        className='item'\n        key={`item-${get(item, 'node.id')}`}\n        target='_blank'\n        rel='noopener noreferrer'\n        href={get(item, 'node.frontmatter.path')}\n      >\n        <div>\n          <Item item={item} />\n        </div>\n      </a>\n    ) : (\n      <Link\n        className='item'\n        key={`item-${get(item, 'node.id')}`}\n        to={`/news${get(item, 'node.frontmatter.path')}`}\n      >\n        <div>\n          <Item item={item} />\n        </div>\n      </Link>\n    )\n  )\n}\n\nList.defaultProps = {\n  items: [],\n}\n\nList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default List\n","import React from 'react'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport { List } from './index'\n\nconst Latest = () => {\n  return (\n    <StaticQuery\n      query={graphql`\n        {\n          allMarkdownRemark(\n            filter: { fields: { hash: { eq: \"news\" } } }\n            sort: { fields: fileAbsolutePath, order: DESC }\n            limit: 4\n          ) {\n            edges {\n              node {\n                id\n                frontmatter {\n                  title\n                  description\n                  path\n                  category\n                  date\n                  external\n                  image {\n                    childImageSharp {\n                      fluid {\n                        ...GatsbyImageSharpFluid\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => {\n        return <List items={data.allMarkdownRemark.edges} />\n      }}\n    />\n  )\n}\n\nexport default Latest\n","const parseDate = date => {\n  const parts = date.split('-')\n  const d = new Date(parts[2], parts[0] - 1, parts[1])\n  const weekday = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ]\n  const month = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ]\n  return `${weekday[d.getDay()]}, ${\n    month[d.getMonth()]\n  } ${d.getDate()}, ${d.getFullYear()}`\n}\n\nexport default parseDate\n"],"sourceRoot":""}