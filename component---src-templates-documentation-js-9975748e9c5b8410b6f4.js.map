{"version":3,"sources":["webpack:///./src/templates/documentation.js"],"names":["DocumentationTemplate","render","prevNext","summaryType","this","props","data","page","pages","options","summary","get","toc","path","breadcrumb","tree","getTree","getBreadcrumb","meta","getMeta","getPrevNext","filter","item","length","getSummaryType","optionVersions","getVersions","versions","branch","fields","version","title","description","keywords","className","classNames","topOffset","style","slice","dangerouslySetInnerHTML","__html","html","href","sourcePath","next","prev","React","Component"],"mappings":"8OA8BMA,E,kGACJC,OAAA,WAAU,IAgBJC,EAAUC,EAhBP,OACP,EAAwBC,KAAKC,MAAMC,KAA3BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACRC,EAAU,CACdC,QAASC,IAAIJ,EAAM,yBAA0B,EAC7CK,IAAKD,IAAIJ,EAAM,qBAAsB,EACrCL,SAAUS,IAAIJ,EAAM,0BAA2B,EAC/CM,KAAMF,IAAIJ,EAAM,eAChBO,WAAYH,IAAIJ,EAAM,gBAAiB,GAGnCQ,EAAOC,YAAQR,GACfM,EAAaG,YAAcT,EAAOD,GAClCW,EAAOC,YAAQX,EAAOD,GACtBG,EAAUD,EAAQC,QAAUM,YAAQR,EAAOC,EAAQI,MAAQ,KAE7DD,GAAOH,EAAQC,SAAWD,EAAQG,MAEjCH,EAAQC,SAAWD,EAAQP,WAC9BA,EAAWkB,YAAYZ,EAAOD,IAE5BK,KAIsB,IAHPD,IAAIJ,EAAM,WAAY,IAAIc,QACzC,SAAAC,GAAI,OAAIX,IAAIW,EAAM,QAAS,GAAK,GAAKX,IAAIW,EAAM,QAAS,GAAK,KAElDC,SACXX,GAAM,IAGNF,IACFP,EAAcqB,YAAehB,EAAOD,IAEtC,IAAMkB,EAAiBC,YAAYC,GAC3BC,EAAWD,EAASvB,KAAKC,MAAMC,KAAKC,KAAKsB,OAAOC,SAAhDF,OACR,OACE,kBAAC,IAAD,CAAQE,QAAS1B,KAAKC,MAAMC,KAAKC,KAAKsB,OAAOC,SAC3C,kBAAC,IAAD,CACEC,MAAOb,EAAKa,MACZC,YAAad,EAAKc,YAClBC,SAAUf,EAAKe,WAGjB,kBAAC,IAAD,MAEA,kBAAC,kBAAD,KACE,yBAAKC,UAAU,aACb,yBACEA,UAAWC,IACT,kBACCvB,EAA4B,GAAtB,sBAGT,yBAAKsB,UAAU,WACb,kBAAC,SAAD,CAAQE,UAAW,KAChB,gBAAGC,EAAH,EAAGA,MAAH,OACC,yBAAKA,MAAK,iBAAOA,IACf,yBAAKH,UAAU,mBACZT,EAAeF,OAAS,GACvB,kBAAC,IAAD,CACEI,SAAUF,EACVK,QAAS,EAAKzB,MAAMC,KAAKC,KAAKsB,OAAOC,UAGzC,yBACEI,UAAS,QACmB,IAA1BT,EAAeF,OAAe,YAAc,KAG9C,kBAAC,IAAD,CAAYhB,KAAMA,EAAMQ,KAAMA,WAO1C,yBAAKmB,UAAU,QACb,yBAAKA,UAAU,gBACZzB,EAAQK,YACP,yBAAKoB,UAAU,iBACb,kBAAC,IAAD,CAAY1B,MAAOM,EAAWwB,MAAM,MAGxC,yBAAKJ,UAAU,mBACb,yBAAKK,wBAAyB,CAAEC,OAAQjC,EAAKkC,SAE9C/B,GACC,oCACmB,UAAhBP,EACC,yBAAK+B,UAAU,cACb,kBAAC,IAAD,CAAYnB,KAAML,KAGpB,yBAAKwB,UAAU,oBACb,kBAAC,IAAD,CAAanB,KAAML,MAK3B,yBAAKwB,UAAU,kBACb,uBACEA,UAAU,cACVQ,KAAI,wDAA0Dd,EAA1D,0BAA0FxB,KAAKC,MAAMC,KAAKC,KAAKsB,OAAOc,YAE1H,kBAAC,IAAD,MAJF,kCASAhC,IAAIT,EAAU,SAAWS,IAAIT,EAAU,UACvC,kBAAC,IAAD,CACE0C,KAAMjC,IAAIT,EAAU,QACpB2C,KAAMlC,IAAIT,EAAU,YAK3BU,GACC,yBAAKsB,UAAU,eACb,kBAAC,SAAD,CAAQE,UAAW,KAChB,gBAAGC,EAAH,EAAGA,MAAH,OACC,yBAAKA,MAAK,iBAAOA,IACf,yBAAKH,UAAU,mBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,OACb,6BACE,4CAEF,kBAAC,IAAD,mB,GA/HMY,IAAMC,WA8M3B/C","file":"component---src-templates-documentation-js-9975748e9c5b8410b6f4.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\nimport classNames from 'classnames'\nimport get from 'lodash.get'\nimport { Sticky, StickyContainer } from 'react-sticky'\nimport { graphql } from 'gatsby'\n\nimport versions from './../../content/versions.json'\nimport {\n  Breadcrumb,\n  Layout,\n  PrevNext,\n  ScrollUpButton,\n  Seo,\n  SidebarNav,\n  Toc,\n} from '../components/common'\nimport { IconEdit } from '../components/common/icons'\nimport {\n  SummaryNav,\n  SummaryTile,\n  VersionSelect,\n  getBreadcrumb,\n  getMeta,\n  getPrevNext,\n  getSummaryType,\n  getTree,\n  getVersions,\n} from '../components/documentation'\n\nclass DocumentationTemplate extends React.Component {\n  render() {\n    const { page, pages } = this.props.data\n    const options = {\n      summary: get(page, 'frontmatter.summary') || false,\n      toc: get(page, 'frontmatter.toc') || true,\n      prevNext: get(page, 'frontmatter.prevNext') || true,\n      path: get(page, 'fields.path'),\n      breadcrumb: get(page, 'breadcrumb') || true,\n    }\n\n    const tree = getTree(pages)\n    const breadcrumb = getBreadcrumb(pages, page)\n    const meta = getMeta(pages, page)\n    const summary = options.summary ? getTree(pages, options.path) : null\n\n    let toc = !options.summary && options.toc\n    let prevNext, summaryType\n    if (!options.summary && options.prevNext) {\n      prevNext = getPrevNext(pages, page)\n    }\n    if (toc) {\n      const headings = get(page, 'headings', []).filter(\n        item => get(item, 'depth', 0) > 1 && get(item, 'depth', 0) < 4\n      )\n      if (headings.length === 0) {\n        toc = false\n      }\n    }\n    if (summary) {\n      summaryType = getSummaryType(pages, page)\n    }\n    const optionVersions = getVersions(versions)\n    const { branch } = versions[this.props.data.page.fields.version]\n    return (\n      <Layout version={this.props.data.page.fields.version}>\n        <Seo\n          title={meta.title}\n          description={meta.description}\n          keywords={meta.keywords}\n        />\n\n        <ScrollUpButton />\n\n        <StickyContainer>\n          <div className='container'>\n            <div\n              className={classNames(\n                'layout-sidebars',\n                !toc ? 'layout-2-sidebars' : ''\n              )}\n            >\n              <div className='sidebar'>\n                <Sticky topOffset={20}>\n                  {({ style }) => (\n                    <div style={{ ...style }}>\n                      <div className='sidebar-content'>\n                        {optionVersions.length > 1 && (\n                          <VersionSelect\n                            versions={optionVersions}\n                            version={this.props.data.page.fields.version}\n                          />\n                        )}\n                        <div\n                          className={`box ${\n                            optionVersions.length === 0 ? 'no-margin' : ''\n                          }`}\n                        >\n                          <SidebarNav page={page} tree={tree} />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </Sticky>\n              </div>\n              <div className='main'>\n                <div className='main-content'>\n                  {options.breadcrumb && (\n                    <div className='breadcrumb md'>\n                      <Breadcrumb pages={breadcrumb.slice(1)} />\n                    </div>\n                  )}\n                  <div className='post-content md'>\n                    <div dangerouslySetInnerHTML={{ __html: page.html }} />\n                  </div>\n                  {summary && (\n                    <>\n                      {summaryType === 'links' ? (\n                        <div className='summary md'>\n                          <SummaryNav tree={summary} />\n                        </div>\n                      ) : (\n                        <div className='summary tiles md'>\n                          <SummaryTile tree={summary} />\n                        </div>\n                      )}\n                    </>\n                  )}\n                  <div className='edit-on-github'>\n                    <a\n                      className='button icon'\n                      href={`https://github.com/spring-io/dataflow.spring.io/blob/${branch}/content/documentation/${this.props.data.page.fields.sourcePath}`}\n                    >\n                      <IconEdit />\n                      {` `}\n                      Edit this page on GitHub\n                    </a>\n                  </div>\n                  {(get(prevNext, 'prev') || get(prevNext, 'next')) && (\n                    <PrevNext\n                      next={get(prevNext, 'next')}\n                      prev={get(prevNext, 'prev')}\n                    />\n                  )}\n                </div>\n              </div>\n              {toc && (\n                <div className='sidebar-toc'>\n                  <Sticky topOffset={20}>\n                    {({ style }) => (\n                      <div style={{ ...style }}>\n                        <div className='sidebar-content'>\n                          <div className='sticky'>\n                            <div className='toc'>\n                              <div>\n                                <strong>Content</strong>\n                              </div>\n                              <Toc />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </Sticky>\n                </div>\n              )}\n            </div>\n          </div>\n        </StickyContainer>\n      </Layout>\n    )\n  }\n}\n\nDocumentationTemplate.propTypes = {\n  data: PropTypes.shape({\n    page: PropTypes.object.isRequired,\n    pages: PropTypes.object.isRequired,\n  }).isRequired,\n}\n\nexport const articleQuery = graphql`\n  query($slug: String, $version: String) {\n    pages: allMarkdownRemark(\n      filter: {\n        fields: {\n          hash: { eq: \"documentation\" }\n          version: { eq: $version }\n          exclude: { ne: true }\n        }\n        frontmatter: { exclude: { eq: null } }\n      }\n      sort: { fields: fields___slug, order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            path\n            version\n            category\n          }\n          frontmatter {\n            title\n            description\n            path\n            meta_title\n            meta_description\n            keywords\n          }\n        }\n      }\n    }\n    page: markdownRemark(fields: { path: { eq: $slug } }) {\n      html\n      headings {\n        value\n        depth\n      }\n      fields {\n        path\n        version\n        category\n        sourcePath\n      }\n      frontmatter {\n        title\n        summary\n        path\n        toc\n        prevNext\n      }\n    }\n  }\n`\n\nexport default DocumentationTemplate\n"],"sourceRoot":""}