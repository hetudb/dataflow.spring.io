{"version":3,"sources":["webpack:///./src/templates/version.js"],"names":["DocumentationVersion","render","this","props","data","page","pages","options","summary","get","path","tree","getTree","optionVersions","getVersions","versions","currentVersion","find","version","key","context","title","className","classNames","topOffset","style","length","fields","category","React","Component"],"mappings":"kOAgBMA,E,kGACJC,OAAA,WAAU,IAAD,OACP,EAAwBC,KAAKC,MAAMC,KAA3BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACRC,EAAU,CACdC,QAASC,IAAIJ,EAAM,yBAA0B,EAC7CK,KAAMD,IAAIJ,EAAM,SAEZM,EAAOC,YAAQN,GACfE,EAAUI,YAAQN,EAAOC,EAAQG,MACjCG,EAAiBC,YAAYC,GAE7BC,EAAiBH,EAAeI,MACpC,SAAAC,GAAO,OAAIA,EAAQC,MAAQ,EAAKhB,MAAMC,KAAKC,KAAKe,QAAQF,WAE1D,OACE,kBAAC,IAAD,CAAQA,QAAShB,KAAKC,MAAMC,KAAKC,KAAKe,QAAQF,SAC5C,kBAAC,IAAD,CAAKG,MAAK,iBAAmBnB,KAAKC,MAAMC,KAAKC,KAAKe,QAAQF,UAC1D,kBAAC,kBAAD,KACE,yBAAKI,UAAU,aACb,yBAAKA,UAAWC,IAAW,kBAAmB,sBAC5C,yBAAKD,UAAU,WACb,kBAAC,SAAD,CAAQE,UAAW,KAChB,gBAAGC,EAAH,EAAGA,MAAH,OACC,yBAAKA,MAAK,iBAAOA,IACf,yBAAKH,UAAU,mBACZT,EAAea,OAAS,GACvB,kBAAC,IAAD,CACEX,SAAUF,EACVK,QAAS,EAAKf,MAAMC,KAAKC,KAAKe,QAAQF,UAG1C,yBAAKI,UAAU,OACb,kBAAC,IAAD,CACEjB,KAAM,CAAEsB,OAAQ,CAAEC,SAAU,OAC5BjB,KAAMA,WAQpB,yBAAKW,UAAU,QACb,yBAAKA,UAAU,gBACb,uCAAaN,EAAeK,OAC5B,yBAAKC,UAAU,oBACdd,GACC,oCACE,yBAAKc,UAAU,oBACb,kBAAC,IAAD,CAAaX,KAAMH,a,GAjDRqB,IAAMC,WAgH1B9B","file":"component---src-templates-version-js-4aceab6a508b4f04e0f9.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\nimport classNames from 'classnames'\nimport get from 'lodash.get'\nimport { Sticky, StickyContainer } from 'react-sticky'\nimport { graphql } from 'gatsby'\n\nimport versions from './../../content/versions.json'\nimport { Layout, Seo, SidebarNav } from '../components/common'\nimport {\n  SummaryTile,\n  VersionSelect,\n  getTree,\n  getVersions,\n} from '../components/documentation'\n\nclass DocumentationVersion extends React.Component {\n  render() {\n    const { page, pages } = this.props.data\n    const options = {\n      summary: get(page, 'frontmatter.summary') || false,\n      path: get(page, 'path'),\n    }\n    const tree = getTree(pages)\n    const summary = getTree(pages, options.path)\n    const optionVersions = getVersions(versions)\n\n    const currentVersion = optionVersions.find(\n      version => version.key === this.props.data.page.context.version\n    )\n    return (\n      <Layout version={this.props.data.page.context.version}>\n        <Seo title={`Documentation ${this.props.data.page.context.version}`} />\n        <StickyContainer>\n          <div className='container'>\n            <div className={classNames('layout-sidebars', 'layout-2-sidebars')}>\n              <div className='sidebar'>\n                <Sticky topOffset={20}>\n                  {({ style }) => (\n                    <div style={{ ...style }}>\n                      <div className='sidebar-content'>\n                        {optionVersions.length > 1 && (\n                          <VersionSelect\n                            versions={optionVersions}\n                            version={this.props.data.page.context.version}\n                          />\n                        )}\n                        <div className='box'>\n                          <SidebarNav\n                            page={{ fields: { category: null } }}\n                            tree={tree}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </Sticky>\n              </div>\n              <div className='main'>\n                <div className='main-content'>\n                  <h1>Version {currentVersion.title}</h1>\n                  <div className='post-content md' />\n                  {summary && (\n                    <>\n                      <div className='summary tiles md'>\n                        <SummaryTile tree={summary} />\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </StickyContainer>\n      </Layout>\n    )\n  }\n}\n\nDocumentationVersion.propTypes = {\n  data: PropTypes.shape({\n    page: PropTypes.object.isRequired,\n    pages: PropTypes.object.isRequired,\n  }).isRequired,\n}\n\nexport const articleQuery = graphql`\n  query($versionPath: String, $version: String) {\n    page: sitePage(context: { versionPath: { eq: $versionPath } }) {\n      id\n      path\n      context {\n        version\n      }\n    }\n    pages: allMarkdownRemark(\n      filter: {\n        fields: {\n          hash: { eq: \"documentation\" }\n          version: { eq: $version }\n          exclude: { ne: true }\n        }\n        frontmatter: { exclude: { eq: null } }\n      }\n      sort: { fields: fields___slug, order: ASC }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            path\n            version\n            category\n          }\n          frontmatter {\n            title\n            description\n            path\n            meta_title\n            meta_description\n            keywords\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default DocumentationVersion\n"],"sourceRoot":""}